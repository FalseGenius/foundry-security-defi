// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.18;

import {DSCEngine} from "../src/DSCEngine.sol";
import {Script, console} from "forge-std/Script.sol";
import {MockV3Aggregator} from "../test/mocks/MockV3Aggregator.sol";
import {DecentralizedStableCoin} from "../src/DecentralizedStableCoin.sol";
import {ERC20Mock} from "@openzeppelin/contracts/mocks/token/ERC20Mock.sol";

contract HelperConfigForExploit is Script {
    struct NetworkConfig {
        address wethUsdPriceFeed;
        address wbtcUsdPriceFeed;
        address weth;
        address wbtc;
        uint256 deployerKey;
    }

    uint8 public constant DECIMALS = 8;
    int256 public constant ETH_USD_PRICE = 2000e8;
    int256 public constant BTC_USD_PRICE = 30000e8;

    NetworkConfig public activeNetwork;

    constructor() {
        activeNetwork = getOrCreateAnvilConfig();
    }

    function getOrCreateAnvilConfig() public returns (NetworkConfig memory config) {
        if (activeNetwork.wethUsdPriceFeed != address(0)) return activeNetwork;
        vm.startBroadcast();
        MockV3Aggregator ethPriceFeeds = new MockV3Aggregator(DECIMALS, ETH_USD_PRICE);
        ERC20Mock wethMock = new ERC20Mock("WETH", "WETH", msg.sender, 1000e8);
        MockV3Aggregator btcPriceFeeds = new MockV3Aggregator(DECIMALS, BTC_USD_PRICE);
        ERC20Mock wbtcMock = new ERC20Mock("WBTC", "WBTC", msg.sender, 1000e8);
        vm.stopBroadcast();

        return NetworkConfig({
            wethUsdPriceFeed: address(ethPriceFeeds),
            wbtcUsdPriceFeed: address(btcPriceFeeds),
            weth: address(wethMock),
            wbtc: address(wbtcMock),
            deployerKey: vm.envUint("PRIVATE_KEY_ANVIL")
        });
    }
}
